// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: rolemanager.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Rolemanager_RegisterRole_FullMethodName = "/pb.rolemanager/registerRole"
	Rolemanager_SetRole_FullMethodName      = "/pb.rolemanager/setRole"
	Rolemanager_GetRole_FullMethodName      = "/pb.rolemanager/getRole"
	Rolemanager_DeleteRole_FullMethodName   = "/pb.rolemanager/deleteRole"
)

// RolemanagerClient is the client API for Rolemanager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RolemanagerClient interface {
	RegisterRole(ctx context.Context, opts ...grpc.CallOption) (Rolemanager_RegisterRoleClient, error)
	SetRole(ctx context.Context, opts ...grpc.CallOption) (Rolemanager_SetRoleClient, error)
	GetRole(ctx context.Context, opts ...grpc.CallOption) (Rolemanager_GetRoleClient, error)
	DeleteRole(ctx context.Context, opts ...grpc.CallOption) (Rolemanager_DeleteRoleClient, error)
}

type rolemanagerClient struct {
	cc grpc.ClientConnInterface
}

func NewRolemanagerClient(cc grpc.ClientConnInterface) RolemanagerClient {
	return &rolemanagerClient{cc}
}

func (c *rolemanagerClient) RegisterRole(ctx context.Context, opts ...grpc.CallOption) (Rolemanager_RegisterRoleClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rolemanager_ServiceDesc.Streams[0], Rolemanager_RegisterRole_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolemanagerRegisterRoleClient{stream}
	return x, nil
}

type Rolemanager_RegisterRoleClient interface {
	Send(*RegisterRoleReq) error
	Recv() (*RegisterRoleResp, error)
	grpc.ClientStream
}

type rolemanagerRegisterRoleClient struct {
	grpc.ClientStream
}

func (x *rolemanagerRegisterRoleClient) Send(m *RegisterRoleReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rolemanagerRegisterRoleClient) Recv() (*RegisterRoleResp, error) {
	m := new(RegisterRoleResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolemanagerClient) SetRole(ctx context.Context, opts ...grpc.CallOption) (Rolemanager_SetRoleClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rolemanager_ServiceDesc.Streams[1], Rolemanager_SetRole_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolemanagerSetRoleClient{stream}
	return x, nil
}

type Rolemanager_SetRoleClient interface {
	Send(*SetRoleReq) error
	Recv() (*SetRoleResp, error)
	grpc.ClientStream
}

type rolemanagerSetRoleClient struct {
	grpc.ClientStream
}

func (x *rolemanagerSetRoleClient) Send(m *SetRoleReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rolemanagerSetRoleClient) Recv() (*SetRoleResp, error) {
	m := new(SetRoleResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolemanagerClient) GetRole(ctx context.Context, opts ...grpc.CallOption) (Rolemanager_GetRoleClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rolemanager_ServiceDesc.Streams[2], Rolemanager_GetRole_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolemanagerGetRoleClient{stream}
	return x, nil
}

type Rolemanager_GetRoleClient interface {
	Send(*GetRoleReq) error
	Recv() (*GetRoleResp, error)
	grpc.ClientStream
}

type rolemanagerGetRoleClient struct {
	grpc.ClientStream
}

func (x *rolemanagerGetRoleClient) Send(m *GetRoleReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rolemanagerGetRoleClient) Recv() (*GetRoleResp, error) {
	m := new(GetRoleResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rolemanagerClient) DeleteRole(ctx context.Context, opts ...grpc.CallOption) (Rolemanager_DeleteRoleClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rolemanager_ServiceDesc.Streams[3], Rolemanager_DeleteRole_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rolemanagerDeleteRoleClient{stream}
	return x, nil
}

type Rolemanager_DeleteRoleClient interface {
	Send(*DeleteRoleReq) error
	Recv() (*DeleteRoleResp, error)
	grpc.ClientStream
}

type rolemanagerDeleteRoleClient struct {
	grpc.ClientStream
}

func (x *rolemanagerDeleteRoleClient) Send(m *DeleteRoleReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rolemanagerDeleteRoleClient) Recv() (*DeleteRoleResp, error) {
	m := new(DeleteRoleResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RolemanagerServer is the server API for Rolemanager service.
// All implementations must embed UnimplementedRolemanagerServer
// for forward compatibility
type RolemanagerServer interface {
	RegisterRole(Rolemanager_RegisterRoleServer) error
	SetRole(Rolemanager_SetRoleServer) error
	GetRole(Rolemanager_GetRoleServer) error
	DeleteRole(Rolemanager_DeleteRoleServer) error
	mustEmbedUnimplementedRolemanagerServer()
}

// UnimplementedRolemanagerServer must be embedded to have forward compatible implementations.
type UnimplementedRolemanagerServer struct {
}

func (UnimplementedRolemanagerServer) RegisterRole(Rolemanager_RegisterRoleServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterRole not implemented")
}
func (UnimplementedRolemanagerServer) SetRole(Rolemanager_SetRoleServer) error {
	return status.Errorf(codes.Unimplemented, "method SetRole not implemented")
}
func (UnimplementedRolemanagerServer) GetRole(Rolemanager_GetRoleServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedRolemanagerServer) DeleteRole(Rolemanager_DeleteRoleServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRolemanagerServer) mustEmbedUnimplementedRolemanagerServer() {}

// UnsafeRolemanagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RolemanagerServer will
// result in compilation errors.
type UnsafeRolemanagerServer interface {
	mustEmbedUnimplementedRolemanagerServer()
}

func RegisterRolemanagerServer(s grpc.ServiceRegistrar, srv RolemanagerServer) {
	s.RegisterService(&Rolemanager_ServiceDesc, srv)
}

func _Rolemanager_RegisterRole_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RolemanagerServer).RegisterRole(&rolemanagerRegisterRoleServer{stream})
}

type Rolemanager_RegisterRoleServer interface {
	Send(*RegisterRoleResp) error
	Recv() (*RegisterRoleReq, error)
	grpc.ServerStream
}

type rolemanagerRegisterRoleServer struct {
	grpc.ServerStream
}

func (x *rolemanagerRegisterRoleServer) Send(m *RegisterRoleResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rolemanagerRegisterRoleServer) Recv() (*RegisterRoleReq, error) {
	m := new(RegisterRoleReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Rolemanager_SetRole_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RolemanagerServer).SetRole(&rolemanagerSetRoleServer{stream})
}

type Rolemanager_SetRoleServer interface {
	Send(*SetRoleResp) error
	Recv() (*SetRoleReq, error)
	grpc.ServerStream
}

type rolemanagerSetRoleServer struct {
	grpc.ServerStream
}

func (x *rolemanagerSetRoleServer) Send(m *SetRoleResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rolemanagerSetRoleServer) Recv() (*SetRoleReq, error) {
	m := new(SetRoleReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Rolemanager_GetRole_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RolemanagerServer).GetRole(&rolemanagerGetRoleServer{stream})
}

type Rolemanager_GetRoleServer interface {
	Send(*GetRoleResp) error
	Recv() (*GetRoleReq, error)
	grpc.ServerStream
}

type rolemanagerGetRoleServer struct {
	grpc.ServerStream
}

func (x *rolemanagerGetRoleServer) Send(m *GetRoleResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rolemanagerGetRoleServer) Recv() (*GetRoleReq, error) {
	m := new(GetRoleReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Rolemanager_DeleteRole_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RolemanagerServer).DeleteRole(&rolemanagerDeleteRoleServer{stream})
}

type Rolemanager_DeleteRoleServer interface {
	Send(*DeleteRoleResp) error
	Recv() (*DeleteRoleReq, error)
	grpc.ServerStream
}

type rolemanagerDeleteRoleServer struct {
	grpc.ServerStream
}

func (x *rolemanagerDeleteRoleServer) Send(m *DeleteRoleResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rolemanagerDeleteRoleServer) Recv() (*DeleteRoleReq, error) {
	m := new(DeleteRoleReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Rolemanager_ServiceDesc is the grpc.ServiceDesc for Rolemanager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rolemanager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.rolemanager",
	HandlerType: (*RolemanagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "registerRole",
			Handler:       _Rolemanager_RegisterRole_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "setRole",
			Handler:       _Rolemanager_SetRole_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "getRole",
			Handler:       _Rolemanager_GetRole_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "deleteRole",
			Handler:       _Rolemanager_DeleteRole_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rolemanager.proto",
}
