syntax = "proto3";

option go_package = "./pb";

package pb;


//model
message Server {
	string serverId = 1;
	string name = 2;
	int64 serverType = 3;
	int64 switch = 4;
	int64 startTime = 5;
	int64 area = 6;
	string tags = 7;
	int64 maxOnline = 8;
	int64 maxQueue = 9;
  	int64 maxSign = 10;
  	string templateValue = 11;
}

//req „ÄÅresp
message GetServerReq {
	string serverId = 1;
}

message GetServerResp {
    int64 returnCode = 1;
    string serverId = 2;
    string name = 3;
    int64 serverType = 4;
    int64 switch = 5;
    int64 startTime = 6;
    int64 area = 7;
    string tags = 8;
    int64 maxOnline = 9;
    int64 maxQueue = 10;
    int64 maxSign = 11;
    string templateValue = 12;
}

message SetServerReq  {
    string serverId = 1;
    string name = 2;
    int64 serverType = 3;
    int64 switch = 4;
    int64 startTime = 5;
    int64 area = 6;
    string tags = 7;
    int64 maxOnline = 8;
    int64 maxQueue = 9;
    int64 maxSign = 10;
    string templateValue = 11;
}

message SetServerResp {
    int64 returnCode = 1;
}

message CreateServerReq  {
    string name = 1;
    int64 serverType = 2;
    int64 switch = 3;
    int64 startTime = 4;
    int64 area = 5;
    string tags = 6;
    int64 maxOnline = 7;
    int64 maxQueue = 8;
    int64 maxSign = 9;
    string templateValue = 10;
}

message CreateServerResp {
    string serverId = 1;
    int64 returnCode = 2;
}

message LoginServerReq  {
    string playerId = 1;
    string serverId = 2;
}

message LoginServerResp {
    int64 returnCode = 1;
}


//service
service servermanager {
  rpc createServer(CreateServerReq) returns(CreateServerResp);
  rpc setServer(SetServerReq) returns(SetServerResp);
  rpc getServer(GetServerReq) returns(GetServerResp);
    rpc loginServer(LoginServerReq) returns(LoginServerResp);
}
