// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: roommanager.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Roommanager_CreateGroup_FullMethodName = "/pb.roommanager/createGroup"
	Roommanager_DeleteGroup_FullMethodName = "/pb.roommanager/deleteGroup"
	Roommanager_GetGroup_FullMethodName    = "/pb.roommanager/getGroup"
	Roommanager_JoinGroup_FullMethodName   = "/pb.roommanager/joinGroup"
	Roommanager_LeaveGroup_FullMethodName  = "/pb.roommanager/leaveGroup"
	Roommanager_CreateRoom_FullMethodName  = "/pb.roommanager/createRoom"
	Roommanager_GetRoom_FullMethodName     = "/pb.roommanager/getRoom"
	Roommanager_MatchRoom_FullMethodName   = "/pb.roommanager/matchRoom"
	Roommanager_MatchFinish_FullMethodName = "/pb.roommanager/matchFinish"
)

// RoommanagerClient is the client API for Roommanager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoommanagerClient interface {
	CreateGroup(ctx context.Context, opts ...grpc.CallOption) (Roommanager_CreateGroupClient, error)
	DeleteGroup(ctx context.Context, opts ...grpc.CallOption) (Roommanager_DeleteGroupClient, error)
	GetGroup(ctx context.Context, opts ...grpc.CallOption) (Roommanager_GetGroupClient, error)
	JoinGroup(ctx context.Context, opts ...grpc.CallOption) (Roommanager_JoinGroupClient, error)
	LeaveGroup(ctx context.Context, opts ...grpc.CallOption) (Roommanager_LeaveGroupClient, error)
	CreateRoom(ctx context.Context, opts ...grpc.CallOption) (Roommanager_CreateRoomClient, error)
	GetRoom(ctx context.Context, opts ...grpc.CallOption) (Roommanager_GetRoomClient, error)
	MatchRoom(ctx context.Context, opts ...grpc.CallOption) (Roommanager_MatchRoomClient, error)
	MatchFinish(ctx context.Context, opts ...grpc.CallOption) (Roommanager_MatchFinishClient, error)
}

type roommanagerClient struct {
	cc grpc.ClientConnInterface
}

func NewRoommanagerClient(cc grpc.ClientConnInterface) RoommanagerClient {
	return &roommanagerClient{cc}
}

func (c *roommanagerClient) CreateGroup(ctx context.Context, opts ...grpc.CallOption) (Roommanager_CreateGroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &Roommanager_ServiceDesc.Streams[0], Roommanager_CreateGroup_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &roommanagerCreateGroupClient{stream}
	return x, nil
}

type Roommanager_CreateGroupClient interface {
	Send(*CreateGroupReq) error
	Recv() (*CreateGroupResp, error)
	grpc.ClientStream
}

type roommanagerCreateGroupClient struct {
	grpc.ClientStream
}

func (x *roommanagerCreateGroupClient) Send(m *CreateGroupReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *roommanagerCreateGroupClient) Recv() (*CreateGroupResp, error) {
	m := new(CreateGroupResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roommanagerClient) DeleteGroup(ctx context.Context, opts ...grpc.CallOption) (Roommanager_DeleteGroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &Roommanager_ServiceDesc.Streams[1], Roommanager_DeleteGroup_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &roommanagerDeleteGroupClient{stream}
	return x, nil
}

type Roommanager_DeleteGroupClient interface {
	Send(*DeleteGroupReq) error
	Recv() (*DeleteGroupResp, error)
	grpc.ClientStream
}

type roommanagerDeleteGroupClient struct {
	grpc.ClientStream
}

func (x *roommanagerDeleteGroupClient) Send(m *DeleteGroupReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *roommanagerDeleteGroupClient) Recv() (*DeleteGroupResp, error) {
	m := new(DeleteGroupResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roommanagerClient) GetGroup(ctx context.Context, opts ...grpc.CallOption) (Roommanager_GetGroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &Roommanager_ServiceDesc.Streams[2], Roommanager_GetGroup_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &roommanagerGetGroupClient{stream}
	return x, nil
}

type Roommanager_GetGroupClient interface {
	Send(*GetGroupReq) error
	Recv() (*GetGroupResp, error)
	grpc.ClientStream
}

type roommanagerGetGroupClient struct {
	grpc.ClientStream
}

func (x *roommanagerGetGroupClient) Send(m *GetGroupReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *roommanagerGetGroupClient) Recv() (*GetGroupResp, error) {
	m := new(GetGroupResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roommanagerClient) JoinGroup(ctx context.Context, opts ...grpc.CallOption) (Roommanager_JoinGroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &Roommanager_ServiceDesc.Streams[3], Roommanager_JoinGroup_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &roommanagerJoinGroupClient{stream}
	return x, nil
}

type Roommanager_JoinGroupClient interface {
	Send(*JoinGroupReq) error
	Recv() (*JoinGroupResp, error)
	grpc.ClientStream
}

type roommanagerJoinGroupClient struct {
	grpc.ClientStream
}

func (x *roommanagerJoinGroupClient) Send(m *JoinGroupReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *roommanagerJoinGroupClient) Recv() (*JoinGroupResp, error) {
	m := new(JoinGroupResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roommanagerClient) LeaveGroup(ctx context.Context, opts ...grpc.CallOption) (Roommanager_LeaveGroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &Roommanager_ServiceDesc.Streams[4], Roommanager_LeaveGroup_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &roommanagerLeaveGroupClient{stream}
	return x, nil
}

type Roommanager_LeaveGroupClient interface {
	Send(*LeaveGroupReq) error
	Recv() (*LeaveGroupResp, error)
	grpc.ClientStream
}

type roommanagerLeaveGroupClient struct {
	grpc.ClientStream
}

func (x *roommanagerLeaveGroupClient) Send(m *LeaveGroupReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *roommanagerLeaveGroupClient) Recv() (*LeaveGroupResp, error) {
	m := new(LeaveGroupResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roommanagerClient) CreateRoom(ctx context.Context, opts ...grpc.CallOption) (Roommanager_CreateRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &Roommanager_ServiceDesc.Streams[5], Roommanager_CreateRoom_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &roommanagerCreateRoomClient{stream}
	return x, nil
}

type Roommanager_CreateRoomClient interface {
	Send(*CreateRoomReq) error
	Recv() (*CreateRoomResp, error)
	grpc.ClientStream
}

type roommanagerCreateRoomClient struct {
	grpc.ClientStream
}

func (x *roommanagerCreateRoomClient) Send(m *CreateRoomReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *roommanagerCreateRoomClient) Recv() (*CreateRoomResp, error) {
	m := new(CreateRoomResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roommanagerClient) GetRoom(ctx context.Context, opts ...grpc.CallOption) (Roommanager_GetRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &Roommanager_ServiceDesc.Streams[6], Roommanager_GetRoom_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &roommanagerGetRoomClient{stream}
	return x, nil
}

type Roommanager_GetRoomClient interface {
	Send(*GetRoomReq) error
	Recv() (*GetRoomResp, error)
	grpc.ClientStream
}

type roommanagerGetRoomClient struct {
	grpc.ClientStream
}

func (x *roommanagerGetRoomClient) Send(m *GetRoomReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *roommanagerGetRoomClient) Recv() (*GetRoomResp, error) {
	m := new(GetRoomResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roommanagerClient) MatchRoom(ctx context.Context, opts ...grpc.CallOption) (Roommanager_MatchRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &Roommanager_ServiceDesc.Streams[7], Roommanager_MatchRoom_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &roommanagerMatchRoomClient{stream}
	return x, nil
}

type Roommanager_MatchRoomClient interface {
	Send(*MatchRoomReq) error
	Recv() (*MatchRoomResp, error)
	grpc.ClientStream
}

type roommanagerMatchRoomClient struct {
	grpc.ClientStream
}

func (x *roommanagerMatchRoomClient) Send(m *MatchRoomReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *roommanagerMatchRoomClient) Recv() (*MatchRoomResp, error) {
	m := new(MatchRoomResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roommanagerClient) MatchFinish(ctx context.Context, opts ...grpc.CallOption) (Roommanager_MatchFinishClient, error) {
	stream, err := c.cc.NewStream(ctx, &Roommanager_ServiceDesc.Streams[8], Roommanager_MatchFinish_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &roommanagerMatchFinishClient{stream}
	return x, nil
}

type Roommanager_MatchFinishClient interface {
	Send(*MatchFinishReq) error
	Recv() (*MatchFinishResp, error)
	grpc.ClientStream
}

type roommanagerMatchFinishClient struct {
	grpc.ClientStream
}

func (x *roommanagerMatchFinishClient) Send(m *MatchFinishReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *roommanagerMatchFinishClient) Recv() (*MatchFinishResp, error) {
	m := new(MatchFinishResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RoommanagerServer is the server API for Roommanager service.
// All implementations must embed UnimplementedRoommanagerServer
// for forward compatibility
type RoommanagerServer interface {
	CreateGroup(Roommanager_CreateGroupServer) error
	DeleteGroup(Roommanager_DeleteGroupServer) error
	GetGroup(Roommanager_GetGroupServer) error
	JoinGroup(Roommanager_JoinGroupServer) error
	LeaveGroup(Roommanager_LeaveGroupServer) error
	CreateRoom(Roommanager_CreateRoomServer) error
	GetRoom(Roommanager_GetRoomServer) error
	MatchRoom(Roommanager_MatchRoomServer) error
	MatchFinish(Roommanager_MatchFinishServer) error
	mustEmbedUnimplementedRoommanagerServer()
}

// UnimplementedRoommanagerServer must be embedded to have forward compatible implementations.
type UnimplementedRoommanagerServer struct {
}

func (UnimplementedRoommanagerServer) CreateGroup(Roommanager_CreateGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedRoommanagerServer) DeleteGroup(Roommanager_DeleteGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedRoommanagerServer) GetGroup(Roommanager_GetGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (UnimplementedRoommanagerServer) JoinGroup(Roommanager_JoinGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinGroup not implemented")
}
func (UnimplementedRoommanagerServer) LeaveGroup(Roommanager_LeaveGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method LeaveGroup not implemented")
}
func (UnimplementedRoommanagerServer) CreateRoom(Roommanager_CreateRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedRoommanagerServer) GetRoom(Roommanager_GetRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedRoommanagerServer) MatchRoom(Roommanager_MatchRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method MatchRoom not implemented")
}
func (UnimplementedRoommanagerServer) MatchFinish(Roommanager_MatchFinishServer) error {
	return status.Errorf(codes.Unimplemented, "method MatchFinish not implemented")
}
func (UnimplementedRoommanagerServer) mustEmbedUnimplementedRoommanagerServer() {}

// UnsafeRoommanagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoommanagerServer will
// result in compilation errors.
type UnsafeRoommanagerServer interface {
	mustEmbedUnimplementedRoommanagerServer()
}

func RegisterRoommanagerServer(s grpc.ServiceRegistrar, srv RoommanagerServer) {
	s.RegisterService(&Roommanager_ServiceDesc, srv)
}

func _Roommanager_CreateGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoommanagerServer).CreateGroup(&roommanagerCreateGroupServer{stream})
}

type Roommanager_CreateGroupServer interface {
	Send(*CreateGroupResp) error
	Recv() (*CreateGroupReq, error)
	grpc.ServerStream
}

type roommanagerCreateGroupServer struct {
	grpc.ServerStream
}

func (x *roommanagerCreateGroupServer) Send(m *CreateGroupResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *roommanagerCreateGroupServer) Recv() (*CreateGroupReq, error) {
	m := new(CreateGroupReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Roommanager_DeleteGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoommanagerServer).DeleteGroup(&roommanagerDeleteGroupServer{stream})
}

type Roommanager_DeleteGroupServer interface {
	Send(*DeleteGroupResp) error
	Recv() (*DeleteGroupReq, error)
	grpc.ServerStream
}

type roommanagerDeleteGroupServer struct {
	grpc.ServerStream
}

func (x *roommanagerDeleteGroupServer) Send(m *DeleteGroupResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *roommanagerDeleteGroupServer) Recv() (*DeleteGroupReq, error) {
	m := new(DeleteGroupReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Roommanager_GetGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoommanagerServer).GetGroup(&roommanagerGetGroupServer{stream})
}

type Roommanager_GetGroupServer interface {
	Send(*GetGroupResp) error
	Recv() (*GetGroupReq, error)
	grpc.ServerStream
}

type roommanagerGetGroupServer struct {
	grpc.ServerStream
}

func (x *roommanagerGetGroupServer) Send(m *GetGroupResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *roommanagerGetGroupServer) Recv() (*GetGroupReq, error) {
	m := new(GetGroupReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Roommanager_JoinGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoommanagerServer).JoinGroup(&roommanagerJoinGroupServer{stream})
}

type Roommanager_JoinGroupServer interface {
	Send(*JoinGroupResp) error
	Recv() (*JoinGroupReq, error)
	grpc.ServerStream
}

type roommanagerJoinGroupServer struct {
	grpc.ServerStream
}

func (x *roommanagerJoinGroupServer) Send(m *JoinGroupResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *roommanagerJoinGroupServer) Recv() (*JoinGroupReq, error) {
	m := new(JoinGroupReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Roommanager_LeaveGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoommanagerServer).LeaveGroup(&roommanagerLeaveGroupServer{stream})
}

type Roommanager_LeaveGroupServer interface {
	Send(*LeaveGroupResp) error
	Recv() (*LeaveGroupReq, error)
	grpc.ServerStream
}

type roommanagerLeaveGroupServer struct {
	grpc.ServerStream
}

func (x *roommanagerLeaveGroupServer) Send(m *LeaveGroupResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *roommanagerLeaveGroupServer) Recv() (*LeaveGroupReq, error) {
	m := new(LeaveGroupReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Roommanager_CreateRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoommanagerServer).CreateRoom(&roommanagerCreateRoomServer{stream})
}

type Roommanager_CreateRoomServer interface {
	Send(*CreateRoomResp) error
	Recv() (*CreateRoomReq, error)
	grpc.ServerStream
}

type roommanagerCreateRoomServer struct {
	grpc.ServerStream
}

func (x *roommanagerCreateRoomServer) Send(m *CreateRoomResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *roommanagerCreateRoomServer) Recv() (*CreateRoomReq, error) {
	m := new(CreateRoomReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Roommanager_GetRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoommanagerServer).GetRoom(&roommanagerGetRoomServer{stream})
}

type Roommanager_GetRoomServer interface {
	Send(*GetRoomResp) error
	Recv() (*GetRoomReq, error)
	grpc.ServerStream
}

type roommanagerGetRoomServer struct {
	grpc.ServerStream
}

func (x *roommanagerGetRoomServer) Send(m *GetRoomResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *roommanagerGetRoomServer) Recv() (*GetRoomReq, error) {
	m := new(GetRoomReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Roommanager_MatchRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoommanagerServer).MatchRoom(&roommanagerMatchRoomServer{stream})
}

type Roommanager_MatchRoomServer interface {
	Send(*MatchRoomResp) error
	Recv() (*MatchRoomReq, error)
	grpc.ServerStream
}

type roommanagerMatchRoomServer struct {
	grpc.ServerStream
}

func (x *roommanagerMatchRoomServer) Send(m *MatchRoomResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *roommanagerMatchRoomServer) Recv() (*MatchRoomReq, error) {
	m := new(MatchRoomReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Roommanager_MatchFinish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoommanagerServer).MatchFinish(&roommanagerMatchFinishServer{stream})
}

type Roommanager_MatchFinishServer interface {
	Send(*MatchFinishResp) error
	Recv() (*MatchFinishReq, error)
	grpc.ServerStream
}

type roommanagerMatchFinishServer struct {
	grpc.ServerStream
}

func (x *roommanagerMatchFinishServer) Send(m *MatchFinishResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *roommanagerMatchFinishServer) Recv() (*MatchFinishReq, error) {
	m := new(MatchFinishReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Roommanager_ServiceDesc is the grpc.ServiceDesc for Roommanager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Roommanager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.roommanager",
	HandlerType: (*RoommanagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "createGroup",
			Handler:       _Roommanager_CreateGroup_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "deleteGroup",
			Handler:       _Roommanager_DeleteGroup_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "getGroup",
			Handler:       _Roommanager_GetGroup_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "joinGroup",
			Handler:       _Roommanager_JoinGroup_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "leaveGroup",
			Handler:       _Roommanager_LeaveGroup_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "createRoom",
			Handler:       _Roommanager_CreateRoom_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "getRoom",
			Handler:       _Roommanager_GetRoom_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "matchRoom",
			Handler:       _Roommanager_MatchRoom_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "matchFinish",
			Handler:       _Roommanager_MatchFinish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "roommanager.proto",
}
