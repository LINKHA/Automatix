// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: punishment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Punishment_Report_FullMethodName = "/pb.punishment/report"
)

// PunishmentClient is the client API for Punishment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PunishmentClient interface {
	Report(ctx context.Context, opts ...grpc.CallOption) (Punishment_ReportClient, error)
}

type punishmentClient struct {
	cc grpc.ClientConnInterface
}

func NewPunishmentClient(cc grpc.ClientConnInterface) PunishmentClient {
	return &punishmentClient{cc}
}

func (c *punishmentClient) Report(ctx context.Context, opts ...grpc.CallOption) (Punishment_ReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &Punishment_ServiceDesc.Streams[0], Punishment_Report_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &punishmentReportClient{stream}
	return x, nil
}

type Punishment_ReportClient interface {
	Send(*ReportReq) error
	Recv() (*ReportResp, error)
	grpc.ClientStream
}

type punishmentReportClient struct {
	grpc.ClientStream
}

func (x *punishmentReportClient) Send(m *ReportReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *punishmentReportClient) Recv() (*ReportResp, error) {
	m := new(ReportResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PunishmentServer is the server API for Punishment service.
// All implementations must embed UnimplementedPunishmentServer
// for forward compatibility
type PunishmentServer interface {
	Report(Punishment_ReportServer) error
	mustEmbedUnimplementedPunishmentServer()
}

// UnimplementedPunishmentServer must be embedded to have forward compatible implementations.
type UnimplementedPunishmentServer struct {
}

func (UnimplementedPunishmentServer) Report(Punishment_ReportServer) error {
	return status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedPunishmentServer) mustEmbedUnimplementedPunishmentServer() {}

// UnsafePunishmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PunishmentServer will
// result in compilation errors.
type UnsafePunishmentServer interface {
	mustEmbedUnimplementedPunishmentServer()
}

func RegisterPunishmentServer(s grpc.ServiceRegistrar, srv PunishmentServer) {
	s.RegisterService(&Punishment_ServiceDesc, srv)
}

func _Punishment_Report_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PunishmentServer).Report(&punishmentReportServer{stream})
}

type Punishment_ReportServer interface {
	Send(*ReportResp) error
	Recv() (*ReportReq, error)
	grpc.ServerStream
}

type punishmentReportServer struct {
	grpc.ServerStream
}

func (x *punishmentReportServer) Send(m *ReportResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *punishmentReportServer) Recv() (*ReportReq, error) {
	m := new(ReportReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Punishment_ServiceDesc is the grpc.ServiceDesc for Punishment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Punishment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.punishment",
	HandlerType: (*PunishmentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "report",
			Handler:       _Punishment_Report_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "punishment.proto",
}
